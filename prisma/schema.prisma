generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"] // f√ºr CI auf Ubuntu
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Contact {
  id         Int            @id @default(autoincrement())
  name       String?
  street     String
  postalCode String
  city       String
  tags       String? // JSON als String speichern
  notes      String?
  visits     Visit[]
  issues     Issue[]
  createdAt  DateTime       @default(now())
  walkItems  WalklistItem[]
}

model Walklist {
  id        Int            @id @default(autoincrement())
  title     String
  createdAt DateTime       @default(now())
  items     WalklistItem[]
}

model WalklistItem {
  id         Int      @id @default(autoincrement())
  contact    Contact  @relation(fields: [contactId], references: [id])
  contactId  Int
  walklist   Walklist @relation(fields: [walklistId], references: [id])
  walklistId Int
  position   Int
  assignedTo String?
}

model Visit {
  id         Int      @id @default(autoincrement())
  contact    Contact  @relation(fields: [contactId], references: [id])
  contactId  Int
  walklistId Int?
  outcome    String // statt enum VisitOutcome
  followUp   Boolean  @default(false)
  notes      String?
  createdAt  DateTime @default(now())
}

model Issue {
  id          Int      @id @default(autoincrement())
  contact     Contact  @relation(fields: [contactId], references: [id])
  contactId   Int
  title       String
  description String?
  priority    Int      @default(3)
  status      String   @default("open") // statt enum IssueStatus
  createdAt   DateTime @default(now())
}

model FlyerVariant {
  id        Int      @id @default(autoincrement())
  topic     String
  audience  String
  variantA  String
  variantB  String
  winner    String?
  createdAt DateTime @default(now())
}

model PressContact {
  id        Int          @id @default(autoincrement())
  name      String
  email     String
  outlet    String
  notes     String?
  createdAt DateTime     @default(now())
  drafts    PressDraft[]
}

model PressDraft {
  id        Int           @id @default(autoincrement())
  title     String
  body      String
  contact   PressContact? @relation(fields: [contactId], references: [id])
  contactId Int?
  createdAt DateTime      @default(now())
}

model Campaign {
  id         Int           @id @default(autoincrement())
  name       String
  eDay       DateTime
  guidelines String?
  createdAt  DateTime      @default(now())
  tasks      Task[]
  shifts     Shift[]
  contents   ContentItem[]
  budgets    BudgetItem[]
}

model Task {
  id          Int       @id @default(autoincrement())
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  campaignId  Int
  title       String
  description String?
  status      String    @default("todo") // statt enum TaskStatus
  priority    Int       @default(3)
  startAt     DateTime?
  dueAt       DateTime?
  assignee    String?
  tags        String? // JSON als String
  dependsOn   String? // JSON als String
  createdAt   DateTime  @default(now())
}

model Volunteer {
  id        Int               @id @default(autoincrement())
  name      String
  email     String?
  phone     String?
  skills    String? // JSON als String
  notes     String?
  consent   Boolean           @default(true)
  avail     String? // JSON als String
  createdAt DateTime          @default(now())
  assigns   ShiftAssignment[]
}

model Shift {
  id         Int               @id @default(autoincrement())
  type       String // statt enum ShiftType
  title      String
  location   String?
  startAt    DateTime
  endAt      DateTime
  needed     Int               @default(2)
  campaign   Campaign          @relation(fields: [campaignId], references: [id])
  campaignId Int
  assigns    ShiftAssignment[]
}

model ShiftAssignment {
  id          Int       @id @default(autoincrement())
  volunteer   Volunteer @relation(fields: [volunteerId], references: [id])
  volunteerId Int
  shift       Shift     @relation(fields: [shiftId], references: [id])
  shiftId     Int
}

model ContentItem {
  id          Int       @id @default(autoincrement())
  campaign    Campaign  @relation(fields: [campaignId], references: [id])
  campaignId  Int
  channel     String // statt enum Channel
  title       String
  copy        String?
  assetUrl    String?
  status      String    @default("idea") // statt enum ContentStatus
  scheduledAt DateTime?
  createdAt   DateTime  @default(now())
}

model BudgetItem {
  id         Int      @id @default(autoincrement())
  campaign   Campaign @relation(fields: [campaignId], references: [id])
  campaignId Int
  category   String // statt enum BudgetCat
  vendor     String?
  planned    Int      @default(0)
  actual     Int      @default(0)
  invoiceUrl String?
  note       String?
  createdAt  DateTime @default(now())
}
